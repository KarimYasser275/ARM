
ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003abc  08003abc  00020370  2**0
                  CONTENTS
  4 .ARM          00000000  08003abc  08003abc  00020370  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003abc  08003abc  00020370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08003ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000370  08003e34  00020370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08003e34  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020399  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb35  00000000  00000000  000203dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1b  00000000  00000000  0002ef11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  00031930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018316  00000000  00000000  00032758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012087  00000000  00000000  0004aa6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0a3  00000000  00000000  0005caf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ac7  00000000  00000000  000e8b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000395c  00000000  00000000  000e9660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ecfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000370 	.word	0x20000370
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a64 	.word	0x08003a64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000374 	.word	0x20000374
 800014c:	08003a64 	.word	0x08003a64

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <DMA_Init>:
#define NULL ((void *)0)

void(*DMA_IrqHandler[DMA_MAX_NUMBER_OF_CHANNELS])(void) = {NULL};

void DMA_Init(DMA_config_t DMA_configParam[DMA_MAX_NUMBER_OF_CHANNELS])
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

	DMA->IFCR |= (0xffffffff);		//clear all interrupt flags
 80009e0:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <DMA_Init+0x138>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4b4a      	ldr	r3, [pc, #296]	; (8000b10 <DMA_Init+0x138>)
 80009e6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ea:	605a      	str	r2, [r3, #4]
	for (uint8_t i= DMA_CHANNEL_1; i < DMA_MAX_NUMBER_OF_CHANNELS ; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e084      	b.n	8000afc <DMA_Init+0x124>
	{
		DMA->Channel[i].CCR =	(DMA_configParam[i].EN 		<< OFFSET_EN)|
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4619      	mov	r1, r3
								(DMA_configParam[i].TCIE 	<< OFFSET_TCIE)|
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	005b      	lsls	r3, r3, #1
		DMA->Channel[i].CCR =	(DMA_configParam[i].EN 		<< OFFSET_EN)|
 8000a16:	ea41 0203 	orr.w	r2, r1, r3
								(DMA_configParam[i].HTIE 	<< OFFSET_HTIE)|
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	440b      	add	r3, r1
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	009b      	lsls	r3, r3, #2
								(DMA_configParam[i].TCIE 	<< OFFSET_TCIE)|
 8000a2c:	431a      	orrs	r2, r3
								(DMA_configParam[i].TEIE	<< OFFSET_TEIE)|
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	440b      	add	r3, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	00db      	lsls	r3, r3, #3
								(DMA_configParam[i].HTIE 	<< OFFSET_HTIE)|
 8000a40:	431a      	orrs	r2, r3
								(DMA_configParam[i].DIR 	<< OFFSET_DIR)|
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	440b      	add	r3, r1
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	011b      	lsls	r3, r3, #4
								(DMA_configParam[i].TEIE	<< OFFSET_TEIE)|
 8000a54:	431a      	orrs	r2, r3
								(DMA_configParam[i].CIRC 	<< OFFSET_CIRC)|
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	015b      	lsls	r3, r3, #5
								(DMA_configParam[i].DIR 	<< OFFSET_DIR)|
 8000a68:	431a      	orrs	r2, r3
								(DMA_configParam[i].PINC 	<< OFFSET_PINC)|
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	440b      	add	r3, r1
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	019b      	lsls	r3, r3, #6
								(DMA_configParam[i].CIRC 	<< OFFSET_CIRC)|
 8000a7c:	431a      	orrs	r2, r3
								(DMA_configParam[i].MINC 	<< OFFSET_MINC)|
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	440b      	add	r3, r1
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	01db      	lsls	r3, r3, #7
								(DMA_configParam[i].PINC 	<< OFFSET_PINC)|
 8000a90:	431a      	orrs	r2, r3
								(DMA_configParam[i].PSIZE 	<< OFFSET_PSIZE)|
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	440b      	add	r3, r1
 8000a9a:	785b      	ldrb	r3, [r3, #1]
 8000a9c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
								(DMA_configParam[i].MINC 	<< OFFSET_MINC)|
 8000aa4:	431a      	orrs	r2, r3
								(DMA_configParam[i].MSIZE 	<< OFFSET_MSIZE)|
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	440b      	add	r3, r1
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	029b      	lsls	r3, r3, #10
								(DMA_configParam[i].PSIZE 	<< OFFSET_PSIZE)|
 8000ab8:	431a      	orrs	r2, r3
								(DMA_configParam[i].PL 		<< OFFSET_PL)|
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	440b      	add	r3, r1
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	031b      	lsls	r3, r3, #12
								(DMA_configParam[i].MSIZE 	<< OFFSET_MSIZE)|
 8000acc:	431a      	orrs	r2, r3
								(DMA_configParam[i].MEM2MEM << OFFSET_MEM2MEM);
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	440b      	add	r3, r1
 8000ad6:	785b      	ldrb	r3, [r3, #1]
 8000ad8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	039b      	lsls	r3, r3, #14
								(DMA_configParam[i].PL 		<< OFFSET_PL)|
 8000ae0:	4313      	orrs	r3, r2
		DMA->Channel[i].CCR =	(DMA_configParam[i].EN 		<< OFFSET_EN)|
 8000ae2:	490b      	ldr	r1, [pc, #44]	; (8000b10 <DMA_Init+0x138>)
 8000ae4:	7bfa      	ldrb	r2, [r7, #15]
								(DMA_configParam[i].PL 		<< OFFSET_PL)|
 8000ae6:	4618      	mov	r0, r3
		DMA->Channel[i].CCR =	(DMA_configParam[i].EN 		<< OFFSET_EN)|
 8000ae8:	4613      	mov	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	440b      	add	r3, r1
 8000af2:	3308      	adds	r3, #8
 8000af4:	6018      	str	r0, [r3, #0]
	for (uint8_t i= DMA_CHANNEL_1; i < DMA_MAX_NUMBER_OF_CHANNELS ; i++)
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	3301      	adds	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	f67f af77 	bls.w	80009f2 <DMA_Init+0x1a>
	}
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40020000 	.word	0x40020000

08000b14 <DMA_EnableChannel>:

void DMA_EnableChannel (DMA_Channels_t channel)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	DMA->Channel[channel].CCR |= ((uint16_t)DMA_ENABLE << OFFSET_EN);
 8000b1e:	490c      	ldr	r1, [pc, #48]	; (8000b50 <DMA_EnableChannel+0x3c>)
 8000b20:	79fa      	ldrb	r2, [r7, #7]
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <DMA_EnableChannel+0x3c>)
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	f043 0101 	orr.w	r1, r3, #1
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4403      	add	r3, r0
 8000b42:	3308      	adds	r3, #8
 8000b44:	6019      	str	r1, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	40020000 	.word	0x40020000

08000b54 <DMA_DisableChannel>:

void DMA_DisableChannel (DMA_Channels_t channel)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	DMA->Channel[channel].CCR &= ~((uint16_t)DMA_ENABLE << OFFSET_EN);
 8000b5e:	490c      	ldr	r1, [pc, #48]	; (8000b90 <DMA_DisableChannel+0x3c>)
 8000b60:	79fa      	ldrb	r2, [r7, #7]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	3308      	adds	r3, #8
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <DMA_DisableChannel+0x3c>)
 8000b72:	79fa      	ldrb	r2, [r7, #7]
 8000b74:	f023 0101 	bic.w	r1, r3, #1
 8000b78:	4613      	mov	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4403      	add	r3, r0
 8000b82:	3308      	adds	r3, #8
 8000b84:	6019      	str	r1, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40020000 	.word	0x40020000

08000b94 <DMA_Start>:


void DMA_Start(DMA_Channels_t channel, uint32_t* DMA_SourceAddress, uint32_t* DMA_DestinationAddress, uint16_t DMA_BlockLength)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	81bb      	strh	r3, [r7, #12]
	DMA_DisableChannel(channel);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ffd2 	bl	8000b54 <DMA_DisableChannel>

	if (READ_FROM_PERIPHERAL == READ_BIT(DMA->Channel[channel].CCR,OFFSET_DIR))
 8000bb0:	4923      	ldr	r1, [pc, #140]	; (8000c40 <DMA_Start+0xac>)
 8000bb2:	7bfa      	ldrb	r2, [r7, #15]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3308      	adds	r3, #8
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d114      	bne.n	8000bf4 <DMA_Start+0x60>
	{
		DMA->Channel[channel].CMAR = DMA_DestinationAddress;
 8000bca:	481d      	ldr	r0, [pc, #116]	; (8000c40 <DMA_Start+0xac>)
 8000bcc:	7bfa      	ldrb	r2, [r7, #15]
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4403      	add	r3, r0
 8000bda:	3314      	adds	r3, #20
 8000bdc:	6019      	str	r1, [r3, #0]
		DMA->Channel[channel].CPAR = DMA_SourceAddress;
 8000bde:	4818      	ldr	r0, [pc, #96]	; (8000c40 <DMA_Start+0xac>)
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4403      	add	r3, r0
 8000bee:	3310      	adds	r3, #16
 8000bf0:	6019      	str	r1, [r3, #0]
 8000bf2:	e013      	b.n	8000c1c <DMA_Start+0x88>
	}
	else
	{
		DMA->Channel[channel].CMAR = DMA_SourceAddress;
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <DMA_Start+0xac>)
 8000bf6:	7bfa      	ldrb	r2, [r7, #15]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4403      	add	r3, r0
 8000c04:	3314      	adds	r3, #20
 8000c06:	6019      	str	r1, [r3, #0]
		DMA->Channel[channel].CPAR = DMA_DestinationAddress;
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <DMA_Start+0xac>)
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4403      	add	r3, r0
 8000c18:	3310      	adds	r3, #16
 8000c1a:	6019      	str	r1, [r3, #0]
	}

	DMA->Channel[channel].CNDTR = DMA_BlockLength;
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <DMA_Start+0xac>)
 8000c1e:	7bfa      	ldrb	r2, [r7, #15]
 8000c20:	89b9      	ldrh	r1, [r7, #12]
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4403      	add	r3, r0
 8000c2c:	330c      	adds	r3, #12
 8000c2e:	6019      	str	r1, [r3, #0]

	DMA_EnableChannel(channel);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff6e 	bl	8000b14 <DMA_EnableChannel>

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020000 	.word	0x40020000

08000c44 <DMA_IRQ_HandlerSet>:

void DMA_IRQ_HandlerSet(DMA_Channels_t channel, void* InterruptHandler)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
	if ( InterruptHandler != NULL)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d004      	beq.n	8000c60 <DMA_IRQ_HandlerSet+0x1c>
	{
		DMA_IrqHandler[channel] = InterruptHandler;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	4904      	ldr	r1, [pc, #16]	; (8000c6c <DMA_IRQ_HandlerSet+0x28>)
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000038c 	.word	0x2000038c

08000c70 <Task_1>:
uint8_t Task_20_cnt = 0;

float Temprature = 0;

void Task_1 (void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	Temprature = TEMP_ConvertToTemp();
 8000c74:	f000 f9c4 	bl	8001000 <TEMP_ConvertToTemp>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4a02      	ldr	r2, [pc, #8]	; (8000c84 <Task_1+0x14>)
 8000c7c:	6013      	str	r3, [r2, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200003ac 	.word	0x200003ac

08000c88 <Task_10>:

void Task_10 (void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_2_Pin);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <Task_10+0x1c>)
 8000c90:	f001 fc4a 	bl	8002528 <HAL_GPIO_TogglePin>
//	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
	Task_10_cnt++;
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <Task_10+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <Task_10+0x20>)
 8000c9e:	701a      	strb	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	200003a8 	.word	0x200003a8

08000cac <Task_20>:

void Task_20 (void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <Task_20+0x1c>)
 8000cb4:	f001 fc38 	bl	8002528 <HAL_GPIO_TogglePin>
	Task_10_cnt++;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <Task_20+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <Task_20+0x20>)
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	200003a8 	.word	0x200003a8

08000cd0 <SCHD_Init>:
															.TaskFunc = Task_1 /* Pointer to function Task_20ms to execute its sequence */
                                                        }
};

void SCHD_Init(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
   uint8_t index = MAX_TASK_NUMBER;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	71fb      	strb	r3, [r7, #7]
//       SCHDParam[index].TaskCounter = 0U;
//       SCHDParam[index].TaskReadyFlag = false;
//   }
do
{
    SCHDParam[index-1].TaskActiveFlag = ACTIVE ;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	4915      	ldr	r1, [pc, #84]	; (8000d34 <SCHD_Init+0x64>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	3306      	adds	r3, #6
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
    SCHDParam[index-1].TaskCounter = 0U;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	490f      	ldr	r1, [pc, #60]	; (8000d34 <SCHD_Init+0x64>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	3307      	adds	r3, #7
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
    SCHDParam[--index].TaskReadyFlag = false;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	4909      	ldr	r1, [pc, #36]	; (8000d34 <SCHD_Init+0x64>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
} while(index >0);
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1d9      	bne.n	8000cda <SCHD_Init+0xa>

}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2000001c 	.word	0x2000001c

08000d38 <SCHD_InterruptHandler>:

void SCHD_InterruptHandler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
//    uint8_t index;

    uint8_t index = MAX_TASK_NUMBER;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	71fb      	strb	r3, [r7, #7]
    do
    {
        if( ++SCHDParam[index-1].TaskCounter >= (SCHDParam[index-1].TaskPeriodUs / SCHD_CFG_SCHD_TICK_MICRO_SECOND) )
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	492d      	ldr	r1, [pc, #180]	; (8000dfc <SCHD_InterruptHandler+0xc4>)
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	3307      	adds	r3, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	b2d8      	uxtb	r0, r3
 8000d5a:	4928      	ldr	r1, [pc, #160]	; (8000dfc <SCHD_InterruptHandler+0xc4>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	3307      	adds	r3, #7
 8000d68:	4601      	mov	r1, r0
 8000d6a:	7019      	strb	r1, [r3, #0]
 8000d6c:	4923      	ldr	r1, [pc, #140]	; (8000dfc <SCHD_InterruptHandler+0xc4>)
 8000d6e:	4613      	mov	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	440b      	add	r3, r1
 8000d78:	3307      	adds	r3, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b299      	uxth	r1, r3
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	1e5a      	subs	r2, r3, #1
 8000d82:	481e      	ldr	r0, [pc, #120]	; (8000dfc <SCHD_InterruptHandler+0xc4>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4403      	add	r3, r0
 8000d8e:	3304      	adds	r3, #4
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <SCHD_InterruptHandler+0xc8>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	095b      	lsrs	r3, r3, #5
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d321      	bcc.n	8000de4 <SCHD_InterruptHandler+0xac>
        {
            if( SCHDParam[index-1].TaskActiveFlag == 1U )
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	1e5a      	subs	r2, r3, #1
 8000da4:	4915      	ldr	r1, [pc, #84]	; (8000dfc <SCHD_InterruptHandler+0xc4>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	3306      	adds	r3, #6
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d115      	bne.n	8000de4 <SCHD_InterruptHandler+0xac>
            {
                SCHDParam[index-1].TaskReadyFlag = true;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	490f      	ldr	r1, [pc, #60]	; (8000dfc <SCHD_InterruptHandler+0xc4>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3308      	adds	r3, #8
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
                SCHDParam[index-1].TaskCounter = 0u;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	490a      	ldr	r1, [pc, #40]	; (8000dfc <SCHD_InterruptHandler+0xc4>)
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	3307      	adds	r3, #7
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            /*Do nothing*/
        }
        index--;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
    } while(index >0);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1a8      	bne.n	8000d42 <SCHD_InterruptHandler+0xa>
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	2000001c 	.word	0x2000001c
 8000e00:	10624dd3 	.word	0x10624dd3

08000e04 <SCHD_TaskReadyGet>:

_Bool SCHD_TaskReadyGet(SCHD_Tasks_t task)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
    return SCHDParam[task].TaskReadyFlag;
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	4906      	ldr	r1, [pc, #24]	; (8000e2c <SCHD_TaskReadyGet+0x28>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	781b      	ldrb	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	2000001c 	.word	0x2000001c

08000e30 <SCHD_TaskReadyToFalseSet>:

void SCHD_TaskReadyToFalseSet(SCHD_Tasks_t task)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
    SCHDParam[task].TaskReadyFlag = false;
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	4906      	ldr	r1, [pc, #24]	; (8000e58 <SCHD_TaskReadyToFalseSet+0x28>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	3308      	adds	r3, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	2000001c 	.word	0x2000001c

08000e5c <SCHD_Main>:
{
    SCHDParam[task].TaskReadyFlag = true;
}

void SCHD_Main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
//        {
//            /*Do nothing*/
//        }
//    }
//	HAL_NVIC_DisableIRQ(TIM2_IRQn);
    uint8_t index = MAX_TASK_NUMBER ;
 8000e62:	2303      	movs	r3, #3
 8000e64:	71fb      	strb	r3, [r7, #7]

    do
        {
         if(SCHD_TaskReadyGet(index-1) == true)
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ffc9 	bl	8000e04 <SCHD_TaskReadyGet>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00f      	beq.n	8000e98 <SCHD_Main+0x3c>
        {
            SCHDParam[index-1].TaskFunc();
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <SCHD_Main+0x54>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4798      	blx	r3
            SCHD_TaskReadyToFalseSet(index-1);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffcc 	bl	8000e30 <SCHD_TaskReadyToFalseSet>
        }
        else
        {
            /*Do nothing*/
        }
        index--;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
    } while(index >0);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e0      	bne.n	8000e66 <SCHD_Main+0xa>
//    HAL_NVIC_EnableIRQ(TIM2_IRQn);
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000001c 	.word	0x2000001c

08000eb4 <SPI_Init>:
#include"Bit_Math.h"

extern void __HAL_RCC_SPI1_CLK_ENABLE();

void SPI_Init (SPI_ConfigParam_t SPI_Params)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	SPI->CR1 = 0x000000;
 8000ebc:	4b44      	ldr	r3, [pc, #272]	; (8000fd0 <SPI_Init+0x11c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
	SPI->CR2 = 0x000000;
 8000ec2:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <SPI_Init+0x11c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
	/*Configure SPI*/
	SPI->CR1 = 	 (SPI_Params.CPHA << OFFSET_SPI_CR1_CPHA)
 8000ec8:	793b      	ldrb	r3, [r7, #4]
 8000eca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
				|(SPI_Params.CPOL << OFFSET_SPI_CR1_CPOL)
 8000ed2:	793b      	ldrb	r3, [r7, #4]
 8000ed4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	431a      	orrs	r2, r3
				|(SPI_Params.MSTR <<OFFSET_SPI_CR1_MSTR)
 8000ede:	793b      	ldrb	r3, [r7, #4]
 8000ee0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	431a      	orrs	r2, r3
				|(SPI_Params.BR << OFFSET_SPI_CR1_BR)
 8000eea:	793b      	ldrb	r3, [r7, #4]
 8000eec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	431a      	orrs	r2, r3
				|(SPI_Params.LSBFIRST << OFFSET_SPI_CR1_LSBFIRST)
 8000ef6:	793b      	ldrb	r3, [r7, #4]
 8000ef8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	01db      	lsls	r3, r3, #7
 8000f00:	431a      	orrs	r2, r3
				|(SPI_Params.SSI << OFFSET_SPI_CR1_SSI)
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	431a      	orrs	r2, r3
				|(SPI_Params.SSM << OFFSET_SPI_CR1_SSM)
 8000f0e:	797b      	ldrb	r3, [r7, #5]
 8000f10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	025b      	lsls	r3, r3, #9
 8000f18:	431a      	orrs	r2, r3
				|(SPI_Params.RXONLY << OFFSET_SPI_CR1_RXONLY)
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	431a      	orrs	r2, r3
				|(SPI_Params.DFF << OFFSET_SPI_CR1_DFF)
 8000f26:	797b      	ldrb	r3, [r7, #5]
 8000f28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	02db      	lsls	r3, r3, #11
 8000f30:	431a      	orrs	r2, r3
				|(SPI_Params.CRCNEXT << OFFSET_SPI_CR1_CRCNEXT)
 8000f32:	797b      	ldrb	r3, [r7, #5]
 8000f34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	431a      	orrs	r2, r3
				|(SPI_Params.CRCEN << OFFSET_SPI_CR1_CRCEN)
 8000f3e:	797b      	ldrb	r3, [r7, #5]
 8000f40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	035b      	lsls	r3, r3, #13
 8000f48:	431a      	orrs	r2, r3
				|(SPI_Params.BIDIOE << OFFSET_SPI_CR1_BIDIOE)
 8000f4a:	797b      	ldrb	r3, [r7, #5]
 8000f4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	039b      	lsls	r3, r3, #14
 8000f54:	431a      	orrs	r2, r3
				|(SPI_Params.BIDIMODE << OFFSET_SPI_CR1_BIDIMODE);
 8000f56:	797b      	ldrb	r3, [r7, #5]
 8000f58:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	03db      	lsls	r3, r3, #15
 8000f60:	431a      	orrs	r2, r3
	SPI->CR1 = 	 (SPI_Params.CPHA << OFFSET_SPI_CR1_CPHA)
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <SPI_Init+0x11c>)
 8000f64:	601a      	str	r2, [r3, #0]

	SPI->CR2 =	 (SPI_Params.RXDMAEN << OFFSET_SPI_CR2_RXDMAEN)
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
				|(SPI_Params.TXDMAEN << OFFSET_SPI_CR2_TXDMAEN)
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	431a      	orrs	r2, r3
				|(SPI_Params.SSOE << OFFSET_SPI_CR2_SSOE)
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	431a      	orrs	r2, r3
				|(SPI_Params.ERRIE << OFFSET_SPI_CR2_ERRIE)
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	015b      	lsls	r3, r3, #5
 8000f92:	431a      	orrs	r2, r3
				|(SPI_Params.RXNEIE << OFFSET_SPI_CR2_RXNEIE)
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	431a      	orrs	r2, r3
				|(SPI_Params.TXEIE << OFFSET_SPI_CR2_TXEIE);
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	01db      	lsls	r3, r3, #7
 8000faa:	431a      	orrs	r2, r3
	SPI->CR2 =	 (SPI_Params.RXDMAEN << OFFSET_SPI_CR2_RXDMAEN)
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <SPI_Init+0x11c>)
 8000fae:	605a      	str	r2, [r3, #4]

	/*Enable SPI*/
	SPI->CR1 |=	 (SPI_Params.SPE << OFFSET_SPI_CR1_SPE);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <SPI_Init+0x11c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	793a      	ldrb	r2, [r7, #4]
 8000fb6:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	0192      	lsls	r2, r2, #6
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <SPI_Init+0x11c>)
 8000fc2:	430b      	orrs	r3, r1
 8000fc4:	6013      	str	r3, [r2, #0]

}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <TEMP_GetRawADC>:

extern ADC_HandleTypeDef hadc1;
uint16_t ADC_rawValue = 0;
/*Gets Temprature readings from ADC channel */
uint16_t TEMP_GetRawADC(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fdc:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <TEMP_GetRawADC+0x24>)
 8000fde:	f000 fd53 	bl	8001a88 <HAL_ADC_PollForConversion>
	ADC_rawValue = HAL_ADC_GetValue(&hadc1);
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <TEMP_GetRawADC+0x24>)
 8000fe4:	f000 fe56 	bl	8001c94 <HAL_ADC_GetValue>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <TEMP_GetRawADC+0x28>)
 8000fee:	801a      	strh	r2, [r3, #0]
	return ADC_rawValue;
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <TEMP_GetRawADC+0x28>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200003b4 	.word	0x200003b4
 8000ffc:	200003b0 	.word	0x200003b0

08001000 <TEMP_ConvertToTemp>:

/*Converts Raw ADC readings to actual temperature*/
float TEMP_ConvertToTemp(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	uint16_t rawTemp = TEMP_GetRawADC();
 8001006:	f7ff ffe5 	bl	8000fd4 <TEMP_GetRawADC>
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
//	rawTemp = rawTemp * (3.3/4096);
	float Temp = 0;
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	603b      	str	r3, [r7, #0]

//	Temp = ((V25_VALUE - rawTemp)/AVG_SLOPE) + 25 ;
	Temp = 357.558 - 0.187364 * (float)rawTemp;
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fc86 	bl	8000928 <__aeabi_ui2f>
 800101c:	4603      	mov	r3, r0
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb24 	bl	800066c <__aeabi_f2d>
 8001024:	a30c      	add	r3, pc, #48	; (adr r3, 8001058 <TEMP_ConvertToTemp+0x58>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff f891 	bl	8000150 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	a10b      	add	r1, pc, #44	; (adr r1, 8001060 <TEMP_ConvertToTemp+0x60>)
 8001034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001038:	f7ff f9b8 	bl	80003ac <__aeabi_dsub>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fb6a 	bl	800071c <__aeabi_d2f>
 8001048:	4603      	mov	r3, r0
 800104a:	603b      	str	r3, [r7, #0]

	return Temp;
 800104c:	683b      	ldr	r3, [r7, #0]

}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	26394fad 	.word	0x26394fad
 800105c:	3fc7fb8b 	.word	0x3fc7fb8b
 8001060:	916872b0 	.word	0x916872b0
 8001064:	407658ed 	.word	0x407658ed

08001068 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_ADC1_Init+0x84>)
 800107a:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <MX_ADC1_Init+0x88>)
 800107c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_ADC1_Init+0x84>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_ADC1_Init+0x84>)
 8001086:	2201      	movs	r2, #1
 8001088:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_ADC1_Init+0x84>)
 800108c:	2200      	movs	r2, #0
 800108e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_ADC1_Init+0x84>)
 8001092:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_ADC1_Init+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_ADC1_Init+0x84>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_ADC1_Init+0x84>)
 80010a6:	f000 fb69 	bl	800177c <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 f97c 	bl	80013ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010b4:	2310      	movs	r3, #16
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80010bc:	2305      	movs	r3, #5
 80010be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <MX_ADC1_Init+0x84>)
 80010c6:	f000 fdf1 	bl	8001cac <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010d0:	f000 f96c 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  SET_BIT(hadc1.Instance->CR2, ADC_CR2_DMA); //enable DMA request
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <MX_ADC1_Init+0x84>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <MX_ADC1_Init+0x84>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010e2:	609a      	str	r2, [r3, #8]
  /* USER CODE END ADC1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200003b4 	.word	0x200003b4
 80010f0:	40012400 	.word	0x40012400

080010f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_ADC_MspInit+0x34>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10b      	bne.n	800111e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_ADC_MspInit+0x38>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_ADC_MspInit+0x38>)
 800110c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_ADC_MspInit+0x38>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40012400 	.word	0x40012400
 800112c:	40021000 	.word	0x40021000

08001130 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_GPIO_Init+0x98>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <MX_GPIO_Init+0x98>)
 800114a:	f043 0320 	orr.w	r3, r3, #32
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_GPIO_Init+0x98>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_GPIO_Init+0x98>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <MX_GPIO_Init+0x98>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_GPIO_Init+0x98>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_2_Pin|GPIO_PIN_7, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2182      	movs	r1, #130	; 0x82
 8001178:	4814      	ldr	r0, [pc, #80]	; (80011cc <MX_GPIO_Init+0x9c>)
 800117a:	f001 f9bd 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_3_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	210c      	movs	r1, #12
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <MX_GPIO_Init+0x9c>)
 8001184:	f001 f9b8 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8001188:	2302      	movs	r3, #2
 800118a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800118c:	2311      	movs	r3, #17
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4619      	mov	r1, r3
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <MX_GPIO_Init+0x9c>)
 80011a0:	f001 f826 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA7 */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_1_Pin|GPIO_PIN_7;
 80011a4:	238c      	movs	r3, #140	; 0x8c
 80011a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2302      	movs	r3, #2
 80011b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4619      	mov	r1, r3
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_GPIO_Init+0x9c>)
 80011bc:	f001 f818 	bl	80021f0 <HAL_GPIO_Init>

}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010800 	.word	0x40010800

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fa6f 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f85b 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f7ff ffa7 	bl	8001130 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011e2:	f000 f961 	bl	80014a8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80011e6:	f7ff ff3f 	bl	8001068 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80011ea:	f000 f9c7 	bl	800157c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011ee:	f000 f8ac 	bl	800134a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  SCHD_Init();
 80011f2:	f7ff fd6d 	bl	8000cd0 <SCHD_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <main+0x9c>)
 80011f8:	f001 ff7c 	bl	80030f4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 80011fc:	481c      	ldr	r0, [pc, #112]	; (8001270 <main+0xa0>)
 80011fe:	f000 fb95 	bl	800192c <HAL_ADC_Start>

  extern DMA_config_t DMA_config[7];
  extern SPI_ConfigParam_t SPI_ConfigParams;

  __HAL_RCC_DMA1_CLK_ENABLE();	//enable DMA RCC
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <main+0xa4>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <main+0xa4>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6153      	str	r3, [r2, #20]
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <main+0xa4>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  DMA_Init(DMA_config);
 800121a:	4817      	ldr	r0, [pc, #92]	; (8001278 <main+0xa8>)
 800121c:	f7ff fbdc 	bl	80009d8 <DMA_Init>

  __HAL_RCC_SPI1_CLK_ENABLE();
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <main+0xa4>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <main+0xa4>)
 8001226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <main+0xa4>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
  SPI_Init(SPI_ConfigParams);
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <main+0xac>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fe38 	bl	8000eb4 <SPI_Init>


  extern uint16_t ADC_rawValue;
  DMA_IRQ_HandlerSet(DMA_CHANNEL_1,DMA_IRQ_HANDLER);
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <main+0xb0>)
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fcfc 	bl	8000c44 <DMA_IRQ_HandlerSet>
  DMA_Start(DMA_CHANNEL_1,0x4001244c , ADC_DMA_RawValue, 100);
 800124c:	2364      	movs	r3, #100	; 0x64
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <main+0xb4>)
 8001250:	490d      	ldr	r1, [pc, #52]	; (8001288 <main+0xb8>)
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff fc9e 	bl	8000b94 <DMA_Start>
  DMA_Start(DMA_CHANNEL_2,&ADC_rawValue , ADC_DMA_RawValue2, 100);
 8001258:	2364      	movs	r3, #100	; 0x64
 800125a:	4a0c      	ldr	r2, [pc, #48]	; (800128c <main+0xbc>)
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <main+0xc0>)
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fc98 	bl	8000b94 <DMA_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCHD_Main();
 8001264:	f7ff fdfa 	bl	8000e5c <SCHD_Main>
 8001268:	e7fc      	b.n	8001264 <main+0x94>
 800126a:	bf00      	nop
 800126c:	200003e8 	.word	0x200003e8
 8001270:	200003b4 	.word	0x200003b4
 8001274:	40021000 	.word	0x40021000
 8001278:	20000000 	.word	0x20000000
 800127c:	20000040 	.word	0x20000040
 8001280:	08001381 	.word	0x08001381
 8001284:	20000044 	.word	0x20000044
 8001288:	4001244c 	.word	0x4001244c
 800128c:	200001d4 	.word	0x200001d4
 8001290:	200003b0 	.word	0x200003b0

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	; 0x50
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129e:	2228      	movs	r2, #40	; 0x28
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fbb2 	bl	8003a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c4:	2301      	movs	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d2:	2301      	movs	r3, #1
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 f936 	bl	800255c <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012f6:	f000 f859 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2102      	movs	r1, #2
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fba2 	bl	8002a60 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001322:	f000 f843 	bl	80013ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001326:	2302      	movs	r3, #2
 8001328:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800132a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fd22 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800133e:	f000 f835 	bl	80013ac <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3750      	adds	r7, #80	; 0x50
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2101      	movs	r1, #1
 8001352:	201c      	movs	r0, #28
 8001354:	f000 ff15 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001358:	201c      	movs	r0, #28
 800135a:	f000 ff2e 	bl	80021ba <HAL_NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001372:	d101      	bne.n	8001378 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		SCHD_InterruptHandler();
 8001374:	f7ff fce0 	bl	8000d38 <SCHD_InterruptHandler>
	}
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <DMA_IRQ_HANDLER>:

void DMA_IRQ_HANDLER(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	if (DMA_Ch1IrqCounter < 255)  DMA_Ch1IrqCounter++;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <DMA_IRQ_HANDLER+0x28>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d006      	beq.n	800139a <DMA_IRQ_HANDLER+0x1a>
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <DMA_IRQ_HANDLER+0x28>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <DMA_IRQ_HANDLER+0x28>)
 8001396:	701a      	strb	r2, [r3, #0]
	else DMA_Ch1IrqCounter = 0;
}
 8001398:	e002      	b.n	80013a0 <DMA_IRQ_HANDLER+0x20>
	else DMA_Ch1IrqCounter = 0;
 800139a:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <DMA_IRQ_HANDLER+0x28>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	200003e4 	.word	0x200003e4

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SCHD_Main();
 80013b4:	f7ff fd52 	bl	8000e5c <SCHD_Main>
 80013b8:	e7fc      	b.n	80013b4 <Error_Handler+0x8>
	...

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_MspInit+0x60>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <HAL_MspInit+0x60>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6193      	str	r3, [r2, #24]
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_MspInit+0x60>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_MspInit+0x60>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_MspInit+0x60>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_MspInit+0x60>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80013f2:	2004      	movs	r0, #4
 80013f4:	f000 feba 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x64>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_MspInit+0x64>)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 f96b 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM2_IRQHandler+0x10>)
 800147a:	f001 fe8d 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200003e8 	.word	0x200003e8

08001488 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	DMA_IrqHandler[DMA_CHANNEL_1]();
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <DMA1_Channel1_IRQHandler+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4798      	blx	r3
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000038c 	.word	0x2000038c

0800149c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_TIM2_Init+0x98>)
 80014c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_TIM2_Init+0x98>)
 80014ce:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM2_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_TIM2_Init+0x98>)
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_TIM2_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM2_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ee:	4814      	ldr	r0, [pc, #80]	; (8001540 <MX_TIM2_Init+0x98>)
 80014f0:	f001 fdb0 	bl	8003054 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014fa:	f7ff ff57 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_TIM2_Init+0x98>)
 800150c:	f001 ff4c 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001516:	f7ff ff49 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_TIM2_Init+0x98>)
 8001528:	f002 f922 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001532:	f7ff ff3b 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200003e8 	.word	0x200003e8

08001544 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d10b      	bne.n	800156e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_TIM_Base_MspInit+0x34>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_TIM_Base_MspInit+0x34>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_TIM_Base_MspInit+0x34>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000

0800157c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <MX_USART1_UART_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001588:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800158c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001594:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART1_UART_Init+0x50>)
 800159e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART1_UART_Init+0x50>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART1_UART_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART1_UART_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART1_UART_Init+0x50>)
 80015b8:	f002 f94a 	bl	8003850 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80015c2:	f7ff fef3 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000430 	.word	0x20000430
 80015d0:	40013800 	.word	0x40013800

080015d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_UART_MspInit+0x8c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d131      	bne.n	8001658 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_UART_MspInit+0x90>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <HAL_UART_MspInit+0x90>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_UART_MspInit+0x90>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_UART_MspInit+0x90>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_UART_MspInit+0x90>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_UART_MspInit+0x90>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4619      	mov	r1, r3
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <HAL_UART_MspInit+0x94>)
 800163a:	f000 fdd9 	bl	80021f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800163e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4619      	mov	r1, r3
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <HAL_UART_MspInit+0x94>)
 8001654:	f000 fdcc 	bl	80021f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40013800 	.word	0x40013800
 8001664:	40021000 	.word	0x40021000
 8001668:	40010800 	.word	0x40010800

0800166c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800166c:	f7ff ff16 	bl	800149c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001670:	480b      	ldr	r0, [pc, #44]	; (80016a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001672:	490c      	ldr	r1, [pc, #48]	; (80016a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001688:	4c09      	ldr	r4, [pc, #36]	; (80016b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001696:	f002 f9c1 	bl	8003a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169a:	f7ff fd99 	bl	80011d0 <main>
  bx lr
 800169e:	4770      	bx	lr
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 80016a8:	08003ac4 	.word	0x08003ac4
  ldr r2, =_sbss
 80016ac:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 80016b0:	2000047c 	.word	0x2000047c

080016b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC1_2_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x28>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x28>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 fd4f 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fe72 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40022000 	.word	0x40022000

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fd67 	bl	80021d6 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 fd2f 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000364 	.word	0x20000364
 800173c:	2000036c 	.word	0x2000036c
 8001740:	20000368 	.word	0x20000368

08001744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x1c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x20>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_IncTick+0x20>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	2000036c 	.word	0x2000036c
 8001764:	20000478 	.word	0x20000478

08001768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <HAL_GetTick+0x10>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	20000478 	.word	0x20000478

0800177c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0be      	b.n	800191c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fc9a 	bl	80010f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fbc5 	bl	8001f50 <ADC_ConversionStop_Disable>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 8099 	bne.w	800190a <HAL_ADC_Init+0x18e>
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 8095 	bne.w	800190a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017e8:	f023 0302 	bic.w	r3, r3, #2
 80017ec:	f043 0202 	orr.w	r2, r3, #2
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7b1b      	ldrb	r3, [r3, #12]
 8001802:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001804:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4313      	orrs	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001814:	d003      	beq.n	800181e <HAL_ADC_Init+0xa2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d102      	bne.n	8001824 <HAL_ADC_Init+0xa8>
 800181e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001822:	e000      	b.n	8001826 <HAL_ADC_Init+0xaa>
 8001824:	2300      	movs	r3, #0
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7d1b      	ldrb	r3, [r3, #20]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d119      	bne.n	8001868 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7b1b      	ldrb	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	3b01      	subs	r3, #1
 8001842:	035a      	lsls	r2, r3, #13
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	e00b      	b.n	8001868 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f043 0220 	orr.w	r2, r3, #32
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	4b28      	ldr	r3, [pc, #160]	; (8001924 <HAL_ADC_Init+0x1a8>)
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	430b      	orrs	r3, r1
 800188e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001898:	d003      	beq.n	80018a2 <HAL_ADC_Init+0x126>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d104      	bne.n	80018ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	051b      	lsls	r3, r3, #20
 80018aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	430a      	orrs	r2, r1
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_ADC_Init+0x1ac>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d10b      	bne.n	80018e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	f023 0303 	bic.w	r3, r3, #3
 80018de:	f043 0201 	orr.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e6:	e018      	b.n	800191a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f023 0312 	bic.w	r3, r3, #18
 80018f0:	f043 0210 	orr.w	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001908:	e007      	b.n	800191a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	f043 0210 	orr.w	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	ffe1f7fd 	.word	0xffe1f7fd
 8001928:	ff1f0efe 	.word	0xff1f0efe

0800192c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Start+0x1a>
 8001942:	2302      	movs	r3, #2
 8001944:	e098      	b.n	8001a78 <HAL_ADC_Start+0x14c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 faa4 	bl	8001e9c <ADC_Enable>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 8087 	bne.w	8001a6e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a41      	ldr	r2, [pc, #260]	; (8001a80 <HAL_ADC_Start+0x154>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d105      	bne.n	800198a <HAL_ADC_Start+0x5e>
 800197e:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_ADC_Start+0x158>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d115      	bne.n	80019b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d026      	beq.n	80019f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019b4:	e01d      	b.n	80019f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a2f      	ldr	r2, [pc, #188]	; (8001a84 <HAL_ADC_Start+0x158>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d004      	beq.n	80019d6 <HAL_ADC_Start+0xaa>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2b      	ldr	r2, [pc, #172]	; (8001a80 <HAL_ADC_Start+0x154>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10d      	bne.n	80019f2 <HAL_ADC_Start+0xc6>
 80019d6:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HAL_ADC_Start+0x158>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f023 0206 	bic.w	r2, r3, #6
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a0a:	e002      	b.n	8001a12 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f06f 0202 	mvn.w	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a2e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a32:	d113      	bne.n	8001a5c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_ADC_Start+0x154>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_ADC_Start+0x158>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	e00c      	b.n	8001a76 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	e003      	b.n	8001a76 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40012800 	.word	0x40012800
 8001a84:	40012400 	.word	0x40012400

08001a88 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a9e:	f7ff fe63 	bl	8001768 <HAL_GetTick>
 8001aa2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	f043 0220 	orr.w	r2, r3, #32
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0d3      	b.n	8001c72 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d131      	bne.n	8001b3c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d12a      	bne.n	8001b3c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ae6:	e021      	b.n	8001b2c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aee:	d01d      	beq.n	8001b2c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_ADC_PollForConversion+0x7e>
 8001af6:	f7ff fe37 	bl	8001768 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d212      	bcs.n	8001b2c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10b      	bne.n	8001b2c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f043 0204 	orr.w	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0a2      	b.n	8001c72 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0d6      	beq.n	8001ae8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b3a:	e070      	b.n	8001c1e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b3c:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_ADC_PollForConversion+0x1f4>)
 8001b3e:	681c      	ldr	r4, [r3, #0]
 8001b40:	2002      	movs	r0, #2
 8001b42:	f001 f9d1 	bl	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b46:	4603      	mov	r3, r0
 8001b48:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6919      	ldr	r1, [r3, #16]
 8001b52:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <HAL_ADC_PollForConversion+0x1f8>)
 8001b54:	400b      	ands	r3, r1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x104>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68d9      	ldr	r1, [r3, #12]
 8001b60:	4b48      	ldr	r3, [pc, #288]	; (8001c84 <HAL_ADC_PollForConversion+0x1fc>)
 8001b62:	400b      	ands	r3, r1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d111      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x104>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6919      	ldr	r1, [r3, #16]
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_ADC_PollForConversion+0x200>)
 8001b70:	400b      	ands	r3, r1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d108      	bne.n	8001b88 <HAL_ADC_PollForConversion+0x100>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68d9      	ldr	r1, [r3, #12]
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_ADC_PollForConversion+0x204>)
 8001b7e:	400b      	ands	r3, r1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_PollForConversion+0x100>
 8001b84:	2314      	movs	r3, #20
 8001b86:	e020      	b.n	8001bca <HAL_ADC_PollForConversion+0x142>
 8001b88:	2329      	movs	r3, #41	; 0x29
 8001b8a:	e01e      	b.n	8001bca <HAL_ADC_PollForConversion+0x142>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6919      	ldr	r1, [r3, #16]
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_ADC_PollForConversion+0x200>)
 8001b94:	400b      	ands	r3, r1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x120>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68d9      	ldr	r1, [r3, #12]
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_ADC_PollForConversion+0x204>)
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_ADC_PollForConversion+0x13c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_ADC_PollForConversion+0x208>)
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d108      	bne.n	8001bc8 <HAL_ADC_PollForConversion+0x140>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_ADC_PollForConversion+0x208>)
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_ADC_PollForConversion+0x140>
 8001bc4:	2354      	movs	r3, #84	; 0x54
 8001bc6:	e000      	b.n	8001bca <HAL_ADC_PollForConversion+0x142>
 8001bc8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bd0:	e021      	b.n	8001c16 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d01a      	beq.n	8001c10 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_ADC_PollForConversion+0x168>
 8001be0:	f7ff fdc2 	bl	8001768 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d20f      	bcs.n	8001c10 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d90b      	bls.n	8001c10 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e030      	b.n	8001c72 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d8d9      	bhi.n	8001bd2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0212 	mvn.w	r2, #18
 8001c26:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c42:	d115      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d111      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000364 	.word	0x20000364
 8001c80:	24924924 	.word	0x24924924
 8001c84:	00924924 	.word	0x00924924
 8001c88:	12492492 	.word	0x12492492
 8001c8c:	00492492 	.word	0x00492492
 8001c90:	00249249 	.word	0x00249249

08001c94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x20>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0dc      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x1da>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b06      	cmp	r3, #6
 8001cda:	d81c      	bhi.n	8001d16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b05      	subs	r3, #5
 8001cee:	221f      	movs	r2, #31
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4019      	ands	r1, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b05      	subs	r3, #5
 8001d08:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
 8001d14:	e03c      	b.n	8001d90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d81c      	bhi.n	8001d58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b23      	subs	r3, #35	; 0x23
 8001d30:	221f      	movs	r2, #31
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	4019      	ands	r1, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3b23      	subs	r3, #35	; 0x23
 8001d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
 8001d56:	e01b      	b.n	8001d90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3b41      	subs	r3, #65	; 0x41
 8001d6a:	221f      	movs	r2, #31
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	4019      	ands	r1, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	3b41      	subs	r3, #65	; 0x41
 8001d84:	fa00 f203 	lsl.w	r2, r0, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	d91c      	bls.n	8001dd2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68d9      	ldr	r1, [r3, #12]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	3b1e      	subs	r3, #30
 8001daa:	2207      	movs	r2, #7
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	4019      	ands	r1, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6898      	ldr	r0, [r3, #8]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b1e      	subs	r3, #30
 8001dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	e019      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6919      	ldr	r1, [r3, #16]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	2207      	movs	r2, #7
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4019      	ands	r1, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6898      	ldr	r0, [r3, #8]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d003      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e12:	2b11      	cmp	r3, #17
 8001e14:	d132      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d125      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d126      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d11a      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	0c9a      	lsrs	r2, r3, #18
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e5c:	e002      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f9      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x1b2>
 8001e6a:	e007      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40012400 	.word	0x40012400
 8001e94:	20000364 	.word	0x20000364
 8001e98:	431bde83 	.word	0x431bde83

08001e9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d040      	beq.n	8001f3c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <ADC_Enable+0xac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <ADC_Enable+0xb0>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	0c9b      	lsrs	r3, r3, #18
 8001ed6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ed8:	e002      	b.n	8001ee0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f9      	bne.n	8001eda <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ee6:	f7ff fc3f 	bl	8001768 <HAL_GetTick>
 8001eea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eec:	e01f      	b.n	8001f2e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eee:	f7ff fc3b 	bl	8001768 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d918      	bls.n	8001f2e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d011      	beq.n	8001f2e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	f043 0210 	orr.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f043 0201 	orr.w	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e007      	b.n	8001f3e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d1d8      	bne.n	8001eee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000364 	.word	0x20000364
 8001f4c:	431bde83 	.word	0x431bde83

08001f50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d12e      	bne.n	8001fc8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0201 	bic.w	r2, r2, #1
 8001f78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f7a:	f7ff fbf5 	bl	8001768 <HAL_GetTick>
 8001f7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f80:	e01b      	b.n	8001fba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f82:	f7ff fbf1 	bl	8001768 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d914      	bls.n	8001fba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10d      	bne.n	8001fba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	f043 0210 	orr.w	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e007      	b.n	8001fca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d0dc      	beq.n	8001f82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4906      	ldr	r1, [pc, #24]	; (800206c <__NVIC_EnableIRQ+0x34>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff90 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff2d 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff42 	bl	800201c <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff90 	bl	80020c4 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5f 	bl	8002070 <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff35 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	e169      	b.n	80024d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002204:	2201      	movs	r2, #1
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 8158 	bne.w	80024d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a9a      	ldr	r2, [pc, #616]	; (8002490 <HAL_GPIO_Init+0x2a0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d05e      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800222c:	4a98      	ldr	r2, [pc, #608]	; (8002490 <HAL_GPIO_Init+0x2a0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d875      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002232:	4a98      	ldr	r2, [pc, #608]	; (8002494 <HAL_GPIO_Init+0x2a4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d058      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002238:	4a96      	ldr	r2, [pc, #600]	; (8002494 <HAL_GPIO_Init+0x2a4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d86f      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800223e:	4a96      	ldr	r2, [pc, #600]	; (8002498 <HAL_GPIO_Init+0x2a8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d052      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002244:	4a94      	ldr	r2, [pc, #592]	; (8002498 <HAL_GPIO_Init+0x2a8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d869      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800224a:	4a94      	ldr	r2, [pc, #592]	; (800249c <HAL_GPIO_Init+0x2ac>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d04c      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002250:	4a92      	ldr	r2, [pc, #584]	; (800249c <HAL_GPIO_Init+0x2ac>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d863      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002256:	4a92      	ldr	r2, [pc, #584]	; (80024a0 <HAL_GPIO_Init+0x2b0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d046      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800225c:	4a90      	ldr	r2, [pc, #576]	; (80024a0 <HAL_GPIO_Init+0x2b0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d85d      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002262:	2b12      	cmp	r3, #18
 8002264:	d82a      	bhi.n	80022bc <HAL_GPIO_Init+0xcc>
 8002266:	2b12      	cmp	r3, #18
 8002268:	d859      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_GPIO_Init+0x80>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	080022eb 	.word	0x080022eb
 8002274:	080022c5 	.word	0x080022c5
 8002278:	080022d7 	.word	0x080022d7
 800227c:	08002319 	.word	0x08002319
 8002280:	0800231f 	.word	0x0800231f
 8002284:	0800231f 	.word	0x0800231f
 8002288:	0800231f 	.word	0x0800231f
 800228c:	0800231f 	.word	0x0800231f
 8002290:	0800231f 	.word	0x0800231f
 8002294:	0800231f 	.word	0x0800231f
 8002298:	0800231f 	.word	0x0800231f
 800229c:	0800231f 	.word	0x0800231f
 80022a0:	0800231f 	.word	0x0800231f
 80022a4:	0800231f 	.word	0x0800231f
 80022a8:	0800231f 	.word	0x0800231f
 80022ac:	0800231f 	.word	0x0800231f
 80022b0:	0800231f 	.word	0x0800231f
 80022b4:	080022cd 	.word	0x080022cd
 80022b8:	080022e1 	.word	0x080022e1
 80022bc:	4a79      	ldr	r2, [pc, #484]	; (80024a4 <HAL_GPIO_Init+0x2b4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022c2:	e02c      	b.n	800231e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e029      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	3304      	adds	r3, #4
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e024      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	3308      	adds	r3, #8
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e01f      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	330c      	adds	r3, #12
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e01a      	b.n	8002320 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022f2:	2304      	movs	r3, #4
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e013      	b.n	8002320 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002300:	2308      	movs	r3, #8
 8002302:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	611a      	str	r2, [r3, #16]
          break;
 800230a:	e009      	b.n	8002320 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800230c:	2308      	movs	r3, #8
 800230e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	615a      	str	r2, [r3, #20]
          break;
 8002316:	e003      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e000      	b.n	8002320 <HAL_GPIO_Init+0x130>
          break;
 800231e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d801      	bhi.n	800232a <HAL_GPIO_Init+0x13a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	e001      	b.n	800232e <HAL_GPIO_Init+0x13e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2bff      	cmp	r3, #255	; 0xff
 8002334:	d802      	bhi.n	800233c <HAL_GPIO_Init+0x14c>
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	e002      	b.n	8002342 <HAL_GPIO_Init+0x152>
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	3b08      	subs	r3, #8
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	210f      	movs	r1, #15
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80b1 	beq.w	80024d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002370:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002388:	4a48      	ldr	r2, [pc, #288]	; (80024ac <HAL_GPIO_Init+0x2bc>)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x1ec>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <HAL_GPIO_Init+0x2c4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_GPIO_Init+0x1e8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3e      	ldr	r2, [pc, #248]	; (80024b8 <HAL_GPIO_Init+0x2c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x1e4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <HAL_GPIO_Init+0x2cc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_Init+0x1e0>
 80023cc:	2303      	movs	r3, #3
 80023ce:	e006      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e004      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e002      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023dc:	2300      	movs	r3, #0
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	f002 0203 	and.w	r2, r2, #3
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	4093      	lsls	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ee:	492f      	ldr	r1, [pc, #188]	; (80024ac <HAL_GPIO_Init+0x2bc>)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002408:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	492c      	ldr	r1, [pc, #176]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4928      	ldr	r1, [pc, #160]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002420:	4013      	ands	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002430:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	491e      	ldr	r1, [pc, #120]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002448:	4013      	ands	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4918      	ldr	r1, [pc, #96]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4914      	ldr	r1, [pc, #80]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002470:	4013      	ands	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d021      	beq.n	80024c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]
 800248c:	e021      	b.n	80024d2 <HAL_GPIO_Init+0x2e2>
 800248e:	bf00      	nop
 8002490:	10320000 	.word	0x10320000
 8002494:	10310000 	.word	0x10310000
 8002498:	10220000 	.word	0x10220000
 800249c:	10210000 	.word	0x10210000
 80024a0:	10120000 	.word	0x10120000
 80024a4:	10110000 	.word	0x10110000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40010800 	.word	0x40010800
 80024b4:	40010c00 	.word	0x40010c00
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40011400 	.word	0x40011400
 80024c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_GPIO_Init+0x304>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4909      	ldr	r1, [pc, #36]	; (80024f4 <HAL_GPIO_Init+0x304>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3301      	adds	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f47f ae8e 	bne.w	8002204 <HAL_GPIO_Init+0x14>
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	372c      	adds	r7, #44	; 0x2c
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40010400 	.word	0x40010400

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002514:	e003      	b.n	800251e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	041a      	lsls	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	611a      	str	r2, [r3, #16]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	041a      	lsls	r2, r3, #16
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43d9      	mvns	r1, r3
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	400b      	ands	r3, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	611a      	str	r2, [r3, #16]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
	...

0800255c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e272      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8087 	beq.w	800268a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b04      	cmp	r3, #4
 8002586:	d00c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002588:	4b8f      	ldr	r3, [pc, #572]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b08      	cmp	r3, #8
 8002592:	d112      	bne.n	80025ba <HAL_RCC_OscConfig+0x5e>
 8002594:	4b8c      	ldr	r3, [pc, #560]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d10b      	bne.n	80025ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	4b89      	ldr	r3, [pc, #548]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06c      	beq.n	8002688 <HAL_RCC_OscConfig+0x12c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d168      	bne.n	8002688 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e24c      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x76>
 80025c4:	4b80      	ldr	r3, [pc, #512]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a7f      	ldr	r2, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e02e      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e01d      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0xbc>
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6e      	ldr	r2, [pc, #440]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 8002618:	4b6b      	ldr	r3, [pc, #428]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6a      	ldr	r2, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff f896 	bl	8001768 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7ff f892 	bl	8001768 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e200      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0xe4>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff f882 	bl	8001768 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7ff f87e 	bl	8001768 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1ec      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x10c>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d063      	beq.n	800275e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002696:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d11c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x18c>
 80026ae:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d116      	bne.n	80026e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e1c0      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4939      	ldr	r1, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	e03a      	b.n	800275e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7ff f837 	bl	8001768 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fe:	f7ff f833 	bl	8001768 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1a1      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4927      	ldr	r1, [pc, #156]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
 8002730:	e015      	b.n	800275e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f816 	bl	8001768 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7ff f812 	bl	8001768 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e180      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d03a      	beq.n	80027e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d019      	beq.n	80027a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7fe fff6 	bl	8001768 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002780:	f7fe fff2 	bl	8001768 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e160      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f000 face 	bl	8002d40 <RCC_Delay>
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7fe ffdc 	bl	8001768 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b2:	e00f      	b.n	80027d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7fe ffd8 	bl	8001768 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d908      	bls.n	80027d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e146      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	42420000 	.word	0x42420000
 80027d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e9      	bne.n	80027b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a6 	beq.w	800293a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b8b      	ldr	r3, [pc, #556]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a87      	ldr	r2, [pc, #540]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	61d3      	str	r3, [r2, #28]
 800280a:	4b85      	ldr	r3, [pc, #532]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7fe ff99 	bl	8001768 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fe ff95 	bl	8001768 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e103      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x312>
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a6e      	ldr	r2, [pc, #440]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	e02d      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x334>
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6213      	str	r3, [r2, #32]
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	e01c      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b05      	cmp	r3, #5
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_OscConfig+0x356>
 8002898:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a60      	ldr	r2, [pc, #384]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	6213      	str	r3, [r2, #32]
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a5d      	ldr	r2, [pc, #372]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e00b      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 80028b2:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a5a      	ldr	r2, [pc, #360]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	6213      	str	r3, [r2, #32]
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4a57      	ldr	r2, [pc, #348]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d015      	beq.n	80028fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7fe ff49 	bl	8001768 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe ff45 	bl	8001768 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0b1      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ee      	beq.n	80028da <HAL_RCC_OscConfig+0x37e>
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fe:	f7fe ff33 	bl	8001768 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe ff2f 	bl	8001768 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e09b      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291c:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ee      	bne.n	8002906 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d105      	bne.n	800293a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292e:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002938:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d061      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d146      	bne.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe ff03 	bl	8001768 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7fe feff 	bl	8001768 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e06d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d108      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4921      	ldr	r1, [pc, #132]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a19      	ldr	r1, [r3, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	430b      	orrs	r3, r1
 80029b2:	491b      	ldr	r1, [pc, #108]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fe fed3 	bl	8001768 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fe fecf 	bl	8001768 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e03d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x46a>
 80029e4:	e035      	b.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe febc 	bl	8001768 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe feb8 	bl	8001768 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e026      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x498>
 8002a12:	e01e      	b.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e019      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_OscConfig+0x500>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0d0      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	4965      	ldr	r1, [pc, #404]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d040      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e073      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06b      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4936      	ldr	r1, [pc, #216]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fe fe0a 	bl	8001768 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fe fe06 	bl	8001768 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e053      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d210      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4922      	ldr	r1, [pc, #136]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1cc>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x1d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fd68 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08003a7c 	.word	0x08003a7c
 8002c2c:	20000364 	.word	0x20000364
 8002c30:	20000368 	.word	0x20000368

08002c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x36>
 8002c62:	e027      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c66:	613b      	str	r3, [r7, #16]
      break;
 8002c68:	e027      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
 8002c76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0c5b      	lsrs	r3, r3, #17
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c96:	fb03 f202 	mul.w	r2, r3, r2
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e004      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	613b      	str	r3, [r7, #16]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb6:	613b      	str	r3, [r7, #16]
      break;
 8002cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cba:	693b      	ldr	r3, [r7, #16]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	08003a94 	.word	0x08003a94
 8002cd4:	08003aa4 	.word	0x08003aa4
 8002cd8:	003d0900 	.word	0x003d0900

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	20000364 	.word	0x20000364

08002cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf4:	f7ff fff2 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4903      	ldr	r1, [pc, #12]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08003a8c 	.word	0x08003a8c

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d1c:	f7ff ffde 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0adb      	lsrs	r3, r3, #11
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08003a8c 	.word	0x08003a8c

08002d40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <RCC_Delay+0x34>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <RCC_Delay+0x38>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0a5b      	lsrs	r3, r3, #9
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d5c:	bf00      	nop
  }
  while (Delay --);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1e5a      	subs	r2, r3, #1
 8002d62:	60fa      	str	r2, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f9      	bne.n	8002d5c <RCC_Delay+0x1c>
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	20000364 	.word	0x20000364
 8002d78:	10624dd3 	.word	0x10624dd3

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d07d      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9c:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	61d3      	str	r3, [r2, #28]
 8002db4:	4b49      	ldr	r3, [pc, #292]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d118      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd0:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a42      	ldr	r2, [pc, #264]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fcc4 	bl	8001768 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	e008      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fcc0 	bl	8001768 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e06d      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e02:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d02e      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d027      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e30:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e36:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d014      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe fc8f 	bl	8001768 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fc8b 	bl	8001768 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e036      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4917      	ldr	r1, [pc, #92]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	490b      	ldr	r1, [pc, #44]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	42420440 	.word	0x42420440

08002ee8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	f200 808a 	bhi.w	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d045      	beq.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d075      	beq.n	800300a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f1e:	e082      	b.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f20:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f26:	4b45      	ldr	r3, [pc, #276]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d07b      	beq.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0c9b      	lsrs	r3, r3, #18
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	4a41      	ldr	r2, [pc, #260]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f3c:	5cd3      	ldrb	r3, [r2, r3]
 8002f3e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d015      	beq.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f4a:	4b3c      	ldr	r3, [pc, #240]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0c5b      	lsrs	r3, r3, #17
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	4a3b      	ldr	r2, [pc, #236]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f64:	4a38      	ldr	r2, [pc, #224]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	fb02 f303 	mul.w	r3, r2, r3
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	e004      	b.n	8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f80:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8c:	d102      	bne.n	8002f94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	61bb      	str	r3, [r7, #24]
      break;
 8002f92:	e04a      	b.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
      break;
 8002fa2:	e042      	b.n	800302a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d108      	bne.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	e01f      	b.n	8003008 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd2:	d109      	bne.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002fe0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e00f      	b.n	8003008 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff2:	d11c      	bne.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d016      	beq.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003000:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003004:	61bb      	str	r3, [r7, #24]
      break;
 8003006:	e012      	b.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003008:	e011      	b.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800300a:	f7ff fe85 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 800300e:	4602      	mov	r2, r0
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0b9b      	lsrs	r3, r3, #14
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	61bb      	str	r3, [r7, #24]
      break;
 8003024:	e004      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003026:	bf00      	nop
 8003028:	e002      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800302e:	bf00      	nop
    }
  }
  return (frequency);
 8003030:	69bb      	ldr	r3, [r7, #24]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	08003aa8 	.word	0x08003aa8
 8003044:	08003ab8 	.word	0x08003ab8
 8003048:	007a1200 	.word	0x007a1200
 800304c:	003d0900 	.word	0x003d0900
 8003050:	aaaaaaab 	.word	0xaaaaaaab

08003054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e041      	b.n	80030ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fa62 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 fa74 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d001      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e03a      	b.n	8003182 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIM_Base_Start_IT+0x98>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d009      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_Base_Start_IT+0x9c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <HAL_TIM_Base_Start_IT+0xa0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d010      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	e007      	b.n	8003180 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0202 	mvn.w	r2, #2
 80031c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9b4 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9a7 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f9b6 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d122      	bne.n	8003248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d11b      	bne.n	8003248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0204 	mvn.w	r2, #4
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f98a 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f97d 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f98c 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b08      	cmp	r3, #8
 8003254:	d122      	bne.n	800329c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b08      	cmp	r3, #8
 8003262:	d11b      	bne.n	800329c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0208 	mvn.w	r2, #8
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2204      	movs	r2, #4
 8003272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f960 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f953 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f962 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d122      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d11b      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0210 	mvn.w	r2, #16
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2208      	movs	r2, #8
 80032c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f936 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f929 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f938 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0201 	mvn.w	r2, #1
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe f823 	bl	8001362 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	2b80      	cmp	r3, #128	; 0x80
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa7b 	bl	800383e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8fc 	bl	800356c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b20      	cmp	r3, #32
 8003380:	d10e      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d107      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0220 	mvn.w	r2, #32
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa46 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0b4      	b.n	800352e <HAL_TIM_ConfigClockSource+0x186>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fc:	d03e      	beq.n	800347c <HAL_TIM_ConfigClockSource+0xd4>
 80033fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003402:	f200 8087 	bhi.w	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	f000 8086 	beq.w	800351a <HAL_TIM_ConfigClockSource+0x172>
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d87f      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b70      	cmp	r3, #112	; 0x70
 8003416:	d01a      	beq.n	800344e <HAL_TIM_ConfigClockSource+0xa6>
 8003418:	2b70      	cmp	r3, #112	; 0x70
 800341a:	d87b      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b60      	cmp	r3, #96	; 0x60
 800341e:	d050      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003420:	2b60      	cmp	r3, #96	; 0x60
 8003422:	d877      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b50      	cmp	r3, #80	; 0x50
 8003426:	d03c      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003428:	2b50      	cmp	r3, #80	; 0x50
 800342a:	d873      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d058      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d86f      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d064      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15a>
 8003438:	2b30      	cmp	r3, #48	; 0x30
 800343a:	d86b      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d060      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15a>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d867      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05c      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15a>
 8003448:	2b10      	cmp	r3, #16
 800344a:	d05a      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15a>
 800344c:	e062      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800345e:	f000 f968 	bl	8003732 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	609a      	str	r2, [r3, #8]
      break;
 800347a:	e04f      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800348c:	f000 f951 	bl	8003732 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349e:	609a      	str	r2, [r3, #8]
      break;
 80034a0:	e03c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	461a      	mov	r2, r3
 80034b0:	f000 f8c8 	bl	8003644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2150      	movs	r1, #80	; 0x50
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f91f 	bl	80036fe <TIM_ITRx_SetConfig>
      break;
 80034c0:	e02c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ce:	461a      	mov	r2, r3
 80034d0:	f000 f8e6 	bl	80036a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2160      	movs	r1, #96	; 0x60
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f90f 	bl	80036fe <TIM_ITRx_SetConfig>
      break;
 80034e0:	e01c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	461a      	mov	r2, r3
 80034f0:	f000 f8a8 	bl	8003644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f8ff 	bl	80036fe <TIM_ITRx_SetConfig>
      break;
 8003500:	e00c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f000 f8f6 	bl	80036fe <TIM_ITRx_SetConfig>
      break;
 8003512:	e003      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      break;
 8003518:	e000      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800351a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
	...

08003580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a26      	ldr	r2, [pc, #152]	; (800363c <TIM_Base_SetConfig+0xbc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a25      	ldr	r2, [pc, #148]	; (8003640 <TIM_Base_SetConfig+0xc0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <TIM_Base_SetConfig+0xbc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a18      	ldr	r2, [pc, #96]	; (8003640 <TIM_Base_SetConfig+0xc0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a07      	ldr	r2, [pc, #28]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d103      	bne.n	8003628 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	615a      	str	r2, [r3, #20]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800

08003644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f023 0201 	bic.w	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800366e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 030a 	bic.w	r3, r3, #10
 8003680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 0210 	bic.w	r2, r3, #16
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	031b      	lsls	r3, r3, #12
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	f043 0307 	orr.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	609a      	str	r2, [r3, #8]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003732:	b480      	push	{r7}
 8003734:	b087      	sub	sp, #28
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800374c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	021a      	lsls	r2, r3, #8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	431a      	orrs	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4313      	orrs	r3, r2
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	609a      	str	r2, [r3, #8]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003784:	2302      	movs	r3, #2
 8003786:	e046      	b.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d009      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a10      	ldr	r2, [pc, #64]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d10c      	bne.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e042      	b.n	80038e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd feac 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	; 0x24
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f82b 	bl	80038f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800392a:	f023 030c 	bic.w	r3, r3, #12
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	430b      	orrs	r3, r1
 8003936:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2c      	ldr	r2, [pc, #176]	; (8003a04 <UART_SetConfig+0x114>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7ff f9de 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	e002      	b.n	8003966 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7ff f9c6 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8003964:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <UART_SetConfig+0x118>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	0119      	lsls	r1, r3, #4
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	009a      	lsls	r2, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fbb2 f2f3 	udiv	r2, r2, r3
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <UART_SetConfig+0x118>)
 800399e:	fba3 0302 	umull	r0, r3, r3, r2
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2064      	movs	r0, #100	; 0x64
 80039a6:	fb00 f303 	mul.w	r3, r0, r3
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	3332      	adds	r3, #50	; 0x32
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <UART_SetConfig+0x118>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039bc:	4419      	add	r1, r3
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009a      	lsls	r2, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <UART_SetConfig+0x118>)
 80039d6:	fba3 0302 	umull	r0, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2064      	movs	r0, #100	; 0x64
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	; 0x32
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <UART_SetConfig+0x118>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	440a      	add	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40013800 	.word	0x40013800
 8003a08:	51eb851f 	.word	0x51eb851f

08003a0c <memset>:
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4402      	add	r2, r0
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d100      	bne.n	8003a16 <memset+0xa>
 8003a14:	4770      	bx	lr
 8003a16:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1a:	e7f9      	b.n	8003a10 <memset+0x4>

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	2600      	movs	r6, #0
 8003a20:	4d0c      	ldr	r5, [pc, #48]	; (8003a54 <__libc_init_array+0x38>)
 8003a22:	4c0d      	ldr	r4, [pc, #52]	; (8003a58 <__libc_init_array+0x3c>)
 8003a24:	1b64      	subs	r4, r4, r5
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	f000 f81a 	bl	8003a64 <_init>
 8003a30:	2600      	movs	r6, #0
 8003a32:	4d0a      	ldr	r5, [pc, #40]	; (8003a5c <__libc_init_array+0x40>)
 8003a34:	4c0a      	ldr	r4, [pc, #40]	; (8003a60 <__libc_init_array+0x44>)
 8003a36:	1b64      	subs	r4, r4, r5
 8003a38:	10a4      	asrs	r4, r4, #2
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	08003abc 	.word	0x08003abc
 8003a58:	08003abc 	.word	0x08003abc
 8003a5c:	08003abc 	.word	0x08003abc
 8003a60:	08003ac0 	.word	0x08003ac0

08003a64 <_init>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr

08003a70 <_fini>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr
